# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import reportportal_grpc_client.client.reportportal_pb2 as reportportal__pb2


class ReportPortalReportingStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartLaunch = channel.unary_unary(
                '/com.epam.reportportal.grpc.model.ReportPortalReporting/StartLaunch',
                request_serializer=reportportal__pb2.StartLaunchRQ.SerializeToString,
                response_deserializer=reportportal__pb2.StartLaunchRS.FromString,
                )
        self.FinishLaunch = channel.unary_unary(
                '/com.epam.reportportal.grpc.model.ReportPortalReporting/FinishLaunch',
                request_serializer=reportportal__pb2.FinishExecutionRQ.SerializeToString,
                response_deserializer=reportportal__pb2.OperationCompletionRS.FromString,
                )
        self.StartTestItemStream = channel.stream_stream(
                '/com.epam.reportportal.grpc.model.ReportPortalReporting/StartTestItemStream',
                request_serializer=reportportal__pb2.StartTestItemRQ.SerializeToString,
                response_deserializer=reportportal__pb2.ItemCreatedRS.FromString,
                )
        self.FinishTestItemStream = channel.stream_stream(
                '/com.epam.reportportal.grpc.model.ReportPortalReporting/FinishTestItemStream',
                request_serializer=reportportal__pb2.FinishTestItemRQ.SerializeToString,
                response_deserializer=reportportal__pb2.OperationCompletionRS.FromString,
                )
        self.StartTestItem = channel.unary_unary(
                '/com.epam.reportportal.grpc.model.ReportPortalReporting/StartTestItem',
                request_serializer=reportportal__pb2.StartTestItemRQ.SerializeToString,
                response_deserializer=reportportal__pb2.ItemCreatedRS.FromString,
                )
        self.FinishTestItem = channel.unary_unary(
                '/com.epam.reportportal.grpc.model.ReportPortalReporting/FinishTestItem',
                request_serializer=reportportal__pb2.FinishTestItemRQ.SerializeToString,
                response_deserializer=reportportal__pb2.OperationCompletionRS.FromString,
                )


class ReportPortalReportingServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StartLaunch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinishLaunch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartTestItemStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinishTestItemStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartTestItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinishTestItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReportPortalReportingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartLaunch': grpc.unary_unary_rpc_method_handler(
                    servicer.StartLaunch,
                    request_deserializer=reportportal__pb2.StartLaunchRQ.FromString,
                    response_serializer=reportportal__pb2.StartLaunchRS.SerializeToString,
            ),
            'FinishLaunch': grpc.unary_unary_rpc_method_handler(
                    servicer.FinishLaunch,
                    request_deserializer=reportportal__pb2.FinishExecutionRQ.FromString,
                    response_serializer=reportportal__pb2.OperationCompletionRS.SerializeToString,
            ),
            'StartTestItemStream': grpc.stream_stream_rpc_method_handler(
                    servicer.StartTestItemStream,
                    request_deserializer=reportportal__pb2.StartTestItemRQ.FromString,
                    response_serializer=reportportal__pb2.ItemCreatedRS.SerializeToString,
            ),
            'FinishTestItemStream': grpc.stream_stream_rpc_method_handler(
                    servicer.FinishTestItemStream,
                    request_deserializer=reportportal__pb2.FinishTestItemRQ.FromString,
                    response_serializer=reportportal__pb2.OperationCompletionRS.SerializeToString,
            ),
            'StartTestItem': grpc.unary_unary_rpc_method_handler(
                    servicer.StartTestItem,
                    request_deserializer=reportportal__pb2.StartTestItemRQ.FromString,
                    response_serializer=reportportal__pb2.ItemCreatedRS.SerializeToString,
            ),
            'FinishTestItem': grpc.unary_unary_rpc_method_handler(
                    servicer.FinishTestItem,
                    request_deserializer=reportportal__pb2.FinishTestItemRQ.FromString,
                    response_serializer=reportportal__pb2.OperationCompletionRS.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.epam.reportportal.grpc.model.ReportPortalReporting', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReportPortalReporting(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StartLaunch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.epam.reportportal.grpc.model.ReportPortalReporting/StartLaunch',
            reportportal__pb2.StartLaunchRQ.SerializeToString,
            reportportal__pb2.StartLaunchRS.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FinishLaunch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.epam.reportportal.grpc.model.ReportPortalReporting/FinishLaunch',
            reportportal__pb2.FinishExecutionRQ.SerializeToString,
            reportportal__pb2.OperationCompletionRS.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartTestItemStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/com.epam.reportportal.grpc.model.ReportPortalReporting/StartTestItemStream',
            reportportal__pb2.StartTestItemRQ.SerializeToString,
            reportportal__pb2.ItemCreatedRS.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FinishTestItemStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/com.epam.reportportal.grpc.model.ReportPortalReporting/FinishTestItemStream',
            reportportal__pb2.FinishTestItemRQ.SerializeToString,
            reportportal__pb2.OperationCompletionRS.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartTestItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.epam.reportportal.grpc.model.ReportPortalReporting/StartTestItem',
            reportportal__pb2.StartTestItemRQ.SerializeToString,
            reportportal__pb2.ItemCreatedRS.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FinishTestItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.epam.reportportal.grpc.model.ReportPortalReporting/FinishTestItem',
            reportportal__pb2.FinishTestItemRQ.SerializeToString,
            reportportal__pb2.OperationCompletionRS.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
